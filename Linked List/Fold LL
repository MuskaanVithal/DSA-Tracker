#include<iostream>
#include<stack>
using namespace std;

class Node{

    public:
    int data;
    Node* next;

    Node(int d){
        this->data = d;
        this->next = NULL;
    }
};

//Function to take input
Node* takeInput(){
    int data;
    cin>>data;
    Node *head = NULL;
    Node *tail = NULL;
    while(data!=-1){
        Node *newNode = new Node(data);
        if(head==NULL){
            head = newNode;
            tail = newNode;
        }
        else{
            tail -> next = newNode;
            tail = newNode;
        }
        cin>>data;
    }
    //cout<<"Input taken"<<endl;
    return head;
}

//Find tail
Node* findTail(Node* head){
    Node* temp = head;

    while(temp->next!=NULL){
        temp = temp->next;
    }

    return temp;
}

//Function to calculate size
int sizeLL(Node* head){
   // Node* tail = findTail(head);
    Node* temp = head;
    int size=0;

    while(temp!=NULL){
        temp = temp->next;
        size++;
    }
    return size;
}

//Function to find middle of ll
Node* middleOfLL(Node* head){
  

   
   if(head == NULL || head->next == NULL) return head;
    Node* slow = head;
    Node* fast = head;

    while(fast->next != NULL && fast->next->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
    }
    
    int size = sizeLL(head);

    if(size%2 == 0){
        return slow->next;
    }
    else{
    return slow;
    }
}

//Reverse Linked list
Node* reverseLL(Node* head){

    Node* prev = NULL;
    Node* curr = head;
    //Node* temp=NULL;
    while(curr!=NULL){
        Node* temp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = temp;
    }

    head = prev;
    return head;
}


//Fold linked list
Node* foldLL(Node*head){
   

    if(head == NULL || head->next == NULL)  return head;
   Node* mid = middleOfLL(head);
   Node* temp = mid->next;
   mid->next = NULL;

   Node* t1 = head;
   temp = reverseLL(temp);

   Node* c1 = head;
   Node* c2 = temp;
   Node* f1 = NULL;
   Node* f2 = NULL;

   while(c1!=NULL && c2!=NULL){
       
        //Backup
        f1=c1->next;
        f2=c2->next;

        //Links
        c1->next = c2;
        c2->next = f1;

        //Move
        c1 = f1;
        c2 = f2;
   }

    return head;

}

//print the linked list
void print(Node *head){
    Node *temp = head;
    while(temp!=NULL){
        cout<<temp -> data<< " ";
        temp = temp -> next;
    }
    cout<<endl;
}

int main(){

    cout<<"Enter list: "<<endl;
    Node *head = takeInput();
   
    head = foldLL(head);

    cout<<"Folded LL is: ";
    print(head);
  
    return 0;
}
