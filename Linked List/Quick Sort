#include<iostream>
#include<vector>
using namespace std;

class Node{

    public:
    int data;
    Node* next;

    Node(int d){
        this->data = d;
        this->next = NULL;
    }
};

//Function to take input
Node* takeInput(){
    int data;
    cin>>data;
    Node *head = NULL;
    Node *tail = NULL;
    while(data!=-1){
        Node *newNode = new Node(data);
        if(head==NULL){
            head = newNode;
            tail = newNode;
        }
        else{
            tail -> next = newNode;
            tail = newNode;
        }
        cin>>data;
    }
    return head;
}

//Reverse Linked list
Node* reverseLL(Node* head){
    Node* prev = NULL;
    Node* curr = head;
    //Node* temp=NULL;
    while(curr!=NULL){
        Node* temp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = temp;
    }

    head = prev;
    return head;
}

vector<Node*> pivotPartition(Node* head, int pvtIdx){
    Node* small = new Node(-1); 
    Node* large = new Node(-1); 

    Node* p = head, *sP = small, *lP = large, *pivot = head;


    while(pvtIdx-- >0){
        pivot = pivot->next;
    }
    while (p)
    {   //only in case of non pivot value else skip for pivot
        if(p!= pivot){
            if(p->data <= pivot->data){
                sP->next = p;
                sP = sP->next;
            }
            else{
                lP->next = p;
                lP = lP->next;
            }
        }
        p = p->next;
    }

    sP->next = NULL;
    pivot->next = NULL;
    lP->next = NULL;

    vector<Node*> v;
    v.push_back(small->next);
    v.push_back( pivot);
    v.push_back(large->next);

    return v;
    
}

int sizeLL(Node* head){
    if(!head) return 0;
    Node* p = head;
    int len =0;
    while(p){
        len++;
        p=p->next;
    }
    return len;
}

vector<Node*> mergeWithPivot(vector<Node*> left, Node* pvt, vector<Node*> right){
    Node* head = NULL, *tail=NULL;

    //when both part exist
    if(left[0] && right[0]){
        left[1]->next = pvt;
        pvt->next = right[0];
        head = left[0];
        tail = right[1];
    }
    else if (left[0])
    {
        left[1]->next = pvt;
        head = left[0];
        tail = pvt;
    }
    else if (right[0])
    {
        pvt->next = right[0];
        head = pvt;
        tail = right[1];
    }
    else{
        head = pvt;
        tail = pvt;
    }
    vector<Node*> v;
    v.push_back(head);
    v.push_back(tail);
    return v;
}
vector<Node*> quickSortHelper(Node* head){
    vector<Node*> ans;
    if(!head || !head->next){
        ans.push_back(head);
        ans.push_back(head);
        return ans;
        //head & tail of merged list as vector
    }


    int len = sizeLL(head);
    int pvtIdx = len/2;

    vector<Node*> subPartsArray = pivotPartition(head,pvtIdx);

    vector<Node*> leftSorted = quickSortHelper(subPartsArray[0]);
    vector<Node*> rightSorted = quickSortHelper(subPartsArray[2]);

    return mergeWithPivot(leftSorted, subPartsArray[1], rightSorted);

}

Node* quickSort(Node* head){
    return quickSortHelper(head)[0];
}

//print the linked list
void print(Node *head){
    Node *temp = head;
    while(temp!=NULL){
        cout<<temp -> data<< " ";
        temp = temp -> next;
    }
    cout<<endl;
}

int main(){

    cout<<"Enter numbers: "<<endl;
    Node *head1 = takeInput();

    head1 = quickSort(head1);   
    
    print(head1);

    return 0;
}
